"""
Django settings for awareness_portal project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Prefer environment variable in production; fall back to the existing key for local dev/tests
SECRET_KEY = os.environ.get(
    "AWARENESS_SECRET_KEY",
    "django-insecure-z*+!u@8f40(uh6nwck2y&75iv7%6f!jjcmm6ff53rg=+u5g=_y",
)

# Toggle debug using environment variable. Default to True for development convenience.
DEBUG = os.environ.get("AWARENESS_DEBUG", "True").lower() in ("1", "true", "yes")

# ALLOWED_HOSTS should be set in production via AWARENESS_ALLOWED_HOSTS (comma-separated)
ALLOWED_HOSTS = [
    h.strip()
    for h in os.environ.get("AWARENESS_ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
    if h.strip()
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "authentication",
    "dashboard",
    "training",
    "quizzes",
    "case_studies",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # WhiteNoise should be just after SecurityMiddleware to serve static files efficiently
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "awareness_portal.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "awareness_portal.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Allow overriding the database with a DATABASE_URL environment variable (e.g. postgres://...)
try:
    import dj_database_url

    DATABASE_URL = os.environ.get("DATABASE_URL")
    if DATABASE_URL:
        DATABASES["default"] = dj_database_url.parse(DATABASE_URL, conn_max_age=600)
except Exception:
    # dj-database-url is optional; keep sqlite default if not available
    pass


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
# Where `collectstatic` will collect static files for production
STATIC_ROOT = BASE_DIR / "staticfiles"

# Use WhiteNoise compressed manifest storage in production to enable long-term caching
STATICFILES_STORAGE = os.environ.get(
    "AWARENESS_STATICFILES_STORAGE",
    "whitenoise.storage.CompressedManifestStaticFilesStorage",
)

# Authentication redirects
LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/dashboard/"

# During development, use the console email backend for password reset flows
EMAIL_BACKEND = os.environ.get(
    "AWARENESS_EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)

# Default from email
DEFAULT_FROM_EMAIL = os.environ.get(
    "AWARENESS_DEFAULT_FROM_EMAIL", "webmaster@localhost"
)

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --- Security settings (sensible defaults; override in production-specific settings) ---
if not DEBUG:
    # Redirect all non-HTTPS to HTTPS when not in debug
    SECURE_SSL_REDIRECT = os.environ.get(
        "AWARENESS_SECURE_SSL_REDIRECT", "True"
    ).lower() in ("1", "true", "yes")
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    # HSTS: enable for production (set to a non-zero integer in seconds)
    SECURE_HSTS_SECONDS = int(os.environ.get("AWARENESS_SECURE_HSTS_SECONDS", 60))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get(
        "AWARENESS_SECURE_HSTS_INCLUDE_SUBDOMAINS", "True"
    ).lower() in ("1", "true", "yes")
    SECURE_HSTS_PRELOAD = os.environ.get(
        "AWARENESS_SECURE_HSTS_PRELOAD", "False"
    ).lower() in ("1", "true", "yes")

# CSRF trusted origins (comma separated)
if os.environ.get("AWARENESS_CSRF_TRUSTED_ORIGINS"):
    CSRF_TRUSTED_ORIGINS = [
        x.strip()
        for x in os.environ.get("AWARENESS_CSRF_TRUSTED_ORIGINS").split(",")
        if x.strip()
    ]

# Basic logging configuration â€” override or extend in production if desired
LOG_LEVEL = os.environ.get("AWARENESS_LOG_LEVEL", "INFO")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {"format": "[%(asctime)s] %(levelname)s %(name)s: %(message)s"},
    },
    "handlers": {
        "console": {
            "level": LOG_LEVEL,
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": LOG_LEVEL,
    },
}

# Allow simple access to the logger in other modules
logger = logging.getLogger(__name__)
